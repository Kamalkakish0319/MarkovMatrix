import java.util.Scanner;
//KamalKakish
// This Algorithm prompts the user to enter a 3 x 3 matrix of double values,
// tests whether it is a positive Markov matrix.
public class Matrix {

	public static void main(String[] args) {

		double[][] matrix = createArray();
		System.out.println(sumColumn(matrix,null) +"\nIt is" + 
				(isMarkovMatrix(matrix) ? " " : " not ") 
							+ "a Markov matrix");
	}
	public static double[][] createArray() //prompts the user to input a 3x3 matrix, accepting the scanner
	{										// creating the 3x3 array.
		Scanner input = new Scanner(System.in);
		double[][] matrix = new double[3][3]; 
		System.out.println("Enter a 3 x 3 matrix row:");
		for (int i = 0; i < matrix.length; i++) 
		{
			for (int j = 0; j < matrix[i].length; j++) 
			{
				matrix[i][j] = input.nextDouble();
			}                                       
		}
		return matrix;
	}
	public static boolean isMarkovMatrix(double[][] matrix) //boolean Returns false if any value in the array is negative
	{

		return isElementsPositive(matrix) && isEachColumnSum1(matrix, 0);
	}

	public static boolean isElementsPositive(double[][] matrix) {
		for (int i = 0; i < matrix.length; i++) 
		{
			for (int j = 0; j < matrix[i].length; j++) 
			{
				if (matrix[i][j] < 0) 
				{                     
					return false; //returns false if negative
				}

			}
		}
		return true; //otherwise returns true
	}
	public static boolean isEachColumnSum1(double[][] matrix,double num) 
	{
		for (int col = 0; col < matrix.length; col++) 
		{
			double sum = 0;
			for (int row = 0; row < matrix.length; row++) 
			{    
				sum += matrix[row][col];

			}
			if (sum != 1.0 )
			{
				return false;
			}
		}
		return true;
	} 
	public static String sumColumn(double[][] matrix, String k ) //print sum of the columns
	{
		System.out.println("The sum of the columns");
		k= "";
		for (int col = 0; col < 3; col++) 
		{
			double sum= 0;
			for (int row = 0; row < 3; row++) 
			{    
				sum += matrix[row][col];

			}   
			System.out.print(sum + " ");
		}

		return k;
	}

}



